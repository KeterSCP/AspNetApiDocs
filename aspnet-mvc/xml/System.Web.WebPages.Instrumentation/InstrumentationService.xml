<Type Name="InstrumentationService" FullName="System.Web.WebPages.Instrumentation.InstrumentationService">
  <TypeSignature Language="C#" Value="public class InstrumentationService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstrumentationService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebPages.Instrumentation.InstrumentationService" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationService" />
  <TypeSignature Language="F#" Value="type InstrumentationService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.WebPages</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Represents a web pages instrumentation service.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstrumentationService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebPages.Instrumentation.InstrumentationService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.WebPages</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Initializes a new instance of the <see cref="T:System.Web.WebPages.Instrumentation.InstrumentationService" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContext">
      <MemberSignature Language="C#" Value="public void BeginContext (System.Web.HttpContextBase context, string virtualPath, System.IO.TextWriter writer, int startPosition, int length, bool isLiteral);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginContext(class System.Web.HttpContextBase context, string virtualPath, class System.IO.TextWriter writer, int32 startPosition, int32 length, bool isLiteral) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebPages.Instrumentation.InstrumentationService.BeginContext(System.Web.HttpContextBase,System.String,System.IO.TextWriter,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginContext (context As HttpContextBase, virtualPath As String, writer As TextWriter, startPosition As Integer, length As Integer, isLiteral As Boolean)" />
      <MemberSignature Language="F#" Value="member this.BeginContext : System.Web.HttpContextBase * string * System.IO.TextWriter * int * int * bool -&gt; unit" Usage="instrumentationService.BeginContext (context, virtualPath, writer, startPosition, length, isLiteral)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.WebPages</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContextBase" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="isLiteral" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">The context.</param>
        <param name="virtualPath">The virtual path.</param>
        <param name="writer">The writer.</param>
        <param name="startPosition">The start position.</param>
        <param name="length">The length of the context.</param>
        <param name="isLiteral">Determines whether the context is literal.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Called before it renders the output for the specified context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndContext">
      <MemberSignature Language="C#" Value="public void EndContext (System.Web.HttpContextBase context, string virtualPath, System.IO.TextWriter writer, int startPosition, int length, bool isLiteral);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContext(class System.Web.HttpContextBase context, string virtualPath, class System.IO.TextWriter writer, int32 startPosition, int32 length, bool isLiteral) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebPages.Instrumentation.InstrumentationService.EndContext(System.Web.HttpContextBase,System.String,System.IO.TextWriter,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContext (context As HttpContextBase, virtualPath As String, writer As TextWriter, startPosition As Integer, length As Integer, isLiteral As Boolean)" />
      <MemberSignature Language="F#" Value="member this.EndContext : System.Web.HttpContextBase * string * System.IO.TextWriter * int * int * bool -&gt; unit" Usage="instrumentationService.EndContext (context, virtualPath, writer, startPosition, length, isLiteral)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.WebPages</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContextBase" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="isLiteral" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">The context.</param>
        <param name="virtualPath">The virtual path.</param>
        <param name="writer">The writer.</param>
        <param name="startPosition">The start position.</param>
        <param name="length">The length of the context.</param>
        <param name="isLiteral">Determines whether the context is literal.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Called after it renders the output for the specified context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebPages.Instrumentation.InstrumentationService.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="System.Web.WebPages.Instrumentation.InstrumentationService.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.WebPages</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets a value indicating whether the service is available.</summary>
        <value>true if the service is available; otherwise, false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
