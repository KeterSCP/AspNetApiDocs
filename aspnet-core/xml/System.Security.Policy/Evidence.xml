<Type Name="Evidence" FullName="System.Security.Policy.Evidence">
  <TypeSignature Language="C#" Value="public sealed class Evidence : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Evidence extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Security.Policy.Evidence" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Evidence&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class Evidence sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Evidence = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Evidence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Evidence();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new empty instance of the <see cref="T:System.Security.Policy.Evidence" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Evidence (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Evidence(System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="new System.Security.Policy.Evidence : System.Security.Policy.Evidence -&gt; System.Security.Policy.Evidence" Usage="new System.Security.Policy.Evidence evidence" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> instance from which to create the new instance. This instance is not deep-copied.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from a shallow copy of an existing one.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Evidence (object[] hostEvidence, object[] assemblyEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] hostEvidence, object[] assemblyEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostEvidence As Object(), assemblyEvidence As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Evidence(cli::array &lt;System::Object ^&gt; ^ hostEvidence, cli::array &lt;System::Object ^&gt; ^ assemblyEvidence);" />
      <MemberSignature Language="F#" Value="new System.Security.Policy.Evidence : obj[] * obj[] -&gt; System.Security.Policy.Evidence" Usage="new System.Security.Policy.Evidence (hostEvidence, assemblyEvidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hostEvidence" Type="System.Object[]" />
        <Parameter Name="assemblyEvidence" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="hostEvidence">The host evidence from which to create the new instance.</param>
        <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Evidence (System.Security.Policy.EvidenceBase[] hostEvidence, System.Security.Policy.EvidenceBase[] assemblyEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Policy.EvidenceBase[] hostEvidence, class System.Security.Policy.EvidenceBase[] assemblyEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostEvidence As EvidenceBase(), assemblyEvidence As EvidenceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Evidence(cli::array &lt;System::Security::Policy::EvidenceBase ^&gt; ^ hostEvidence, cli::array &lt;System::Security::Policy::EvidenceBase ^&gt; ^ assemblyEvidence);" />
      <MemberSignature Language="F#" Value="new System.Security.Policy.Evidence : System.Security.Policy.EvidenceBase[] * System.Security.Policy.EvidenceBase[] -&gt; System.Security.Policy.Evidence" Usage="new System.Security.Policy.Evidence (hostEvidence, assemblyEvidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostEvidence" Type="System.Security.Policy.EvidenceBase[]" />
        <Parameter Name="assemblyEvidence" Type="System.Security.Policy.EvidenceBase[]" />
      </Parameters>
      <Docs>
        <param name="hostEvidence">The host evidence from which to create the new instance.</param>
        <param name="assemblyEvidence">The assembly evidence from which to create the new instance.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from multiple sets of host and assembly evidence.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssembly">
      <MemberSignature Language="C#" Value="public void AddAssembly (object id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssembly(object id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssembly (id As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssembly(System::Object ^ id);" />
      <MemberSignature Language="F#" Value="member this.AddAssembly : obj -&gt; unit" Usage="evidence.AddAssembly id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="id">Any evidence object.</param>
        <summary>Adds the specified assembly evidence to the evidence set.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> is not serializable.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAssemblyEvidence&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AddAssemblyEvidence&lt;T&gt; (T evidence) where T : System.Security.Policy.EvidenceBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyEvidence&lt;(class System.Security.Policy.EvidenceBase) T&gt;(!!T evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyEvidence(Of T As EvidenceBase) (evidence As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Security::Policy::EvidenceBase void AddAssemblyEvidence(T evidence);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyEvidence : 'T -&gt; unit (requires 'T :&gt; System.Security.Policy.EvidenceBase)" Usage="evidence.AddAssemblyEvidence evidence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Security.Policy.EvidenceBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="evidence" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
        <param name="evidence">The assembly evidence to add.</param>
        <summary>Adds an evidence object of the specified type to the assembly-supplied evidence list.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evidence" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T" /> is already in the list.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="evidence" /> is not serializable.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHost">
      <MemberSignature Language="C#" Value="public void AddHost (object id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHost(object id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.AddHost(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHost (id As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHost(System::Object ^ id);" />
      <MemberSignature Language="F#" Value="member this.AddHost : obj -&gt; unit" Usage="evidence.AddHost id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="id">Any evidence object.</param>
        <summary>Adds the specified evidence supplied by the host to the evidence set.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> is not serializable.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHostEvidence&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AddHostEvidence&lt;T&gt; (T evidence) where T : System.Security.Policy.EvidenceBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHostEvidence&lt;(class System.Security.Policy.EvidenceBase) T&gt;(!!T evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.AddHostEvidence``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHostEvidence(Of T As EvidenceBase) (evidence As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Security::Policy::EvidenceBase void AddHostEvidence(T evidence);" />
      <MemberSignature Language="F#" Value="member this.AddHostEvidence : 'T -&gt; unit (requires 'T :&gt; System.Security.Policy.EvidenceBase)" Usage="evidence.AddHostEvidence evidence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Security.Policy.EvidenceBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="evidence" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the object in <paramref name="evidence" />.</typeparam>
        <param name="evidence">The host evidence to add.</param>
        <summary>Adds host evidence of the specified type to the host evidence collection.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evidence" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Evidence of type <paramref name="T" /> is already in the list.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="evidence.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the host and assembly evidence from the evidence set.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Policy.Evidence Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Policy::Evidence ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Security.Policy.Evidence" Usage="evidence.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a duplicate copy of this evidence object.</summary>
        <returns>A duplicate copy of this evidence object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="evidence.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The target array to which to copy evidence objects.</param>
        <param name="index">The zero-based position in the array to which to begin copying evidence objects.</param>
        <summary>Copies evidence objects to an <see cref="T:System.Array" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of the target array.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.Evidence.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Security.Policy.Evidence.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of evidence objects in the evidence set.</summary>
        <value>The number of evidence objects in the evidence set.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetAssemblyEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerator GetAssemblyEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.GetAssemblyEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblyEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetAssemblyEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblyEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="evidence.GetAssemblyEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates evidence provided by the assembly.</summary>
        <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyEvidence&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetAssemblyEvidence&lt;T&gt; () where T : System.Security.Policy.EvidenceBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetAssemblyEvidence&lt;(class System.Security.Policy.EvidenceBase) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.GetAssemblyEvidence``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblyEvidence(Of T As EvidenceBase) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Security::Policy::EvidenceBase T GetAssemblyEvidence();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblyEvidence : unit -&gt; 'T (requires 'T :&gt; System.Security.Policy.EvidenceBase)" Usage="evidence.GetAssemblyEvidence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Security.Policy.EvidenceBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the evidence to get.</typeparam>
        <summary>Gets assembly evidence of the specified type from the collection.</summary>
        <returns>Evidence of type <paramref name="T" /> in the assembly evidence collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="evidence.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.</summary>
        <returns>An enumerator for evidence added by both the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method and the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHostEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetHostEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerator GetHostEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.GetHostEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHostEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetHostEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetHostEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="evidence.GetHostEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerates evidence supplied by the host.</summary>
        <returns>An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHostEvidence&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetHostEvidence&lt;T&gt; () where T : System.Security.Policy.EvidenceBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetHostEvidence&lt;(class System.Security.Policy.EvidenceBase) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.GetHostEvidence``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHostEvidence(Of T As EvidenceBase) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Security::Policy::EvidenceBase T GetHostEvidence();" />
      <MemberSignature Language="F#" Value="member this.GetHostEvidence : unit -&gt; 'T (requires 'T :&gt; System.Security.Policy.EvidenceBase)" Usage="evidence.GetHostEvidence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Security.Policy.EvidenceBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type of the evidence to get.</typeparam>
        <summary>Gets host evidence of the specified type from the collection.</summary>
        <returns>Evidence of type <paramref name="T" /> in the host evidence collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.Evidence.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Security.Policy.Evidence.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the evidence set is read-only.</summary>
        <value>Always <see langword="false" />, because read-only evidence sets are not supported.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.Evidence.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Security.Policy.Evidence.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the evidence set is thread-safe.</summary>
        <value>Always <see langword="false" /> because thread-safe evidence sets are not supported.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public bool Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Locked" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.Evidence.Locked" />
      <MemberSignature Language="VB.NET" Value="Public Property Locked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Locked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Locked : bool with get, set" Usage="System.Security.Policy.Evidence.Locked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the evidence is locked.</summary>
        <value>
          <see langword="true" /> if the evidence is locked; otherwise, <see langword="false" />. The default is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Security.Policy.Evidence -&gt; unit" Usage="evidence.Merge evidence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">The evidence set to be merged into the current evidence set.</param>
        <summary>Merges the specified evidence set into the current evidence set.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="evidence" /> parameter is not a valid instance of <see cref="T:System.Security.Policy.Evidence" />.</exception>
        <exception cref="T:System.Security.SecurityException">
          <see cref="P:System.Security.Policy.Evidence.Locked" /> is <see langword="true" />, the code that calls this method does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, and the <paramref name="evidence" /> parameter has a host list that is not empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveType">
      <MemberSignature Language="C#" Value="public void RemoveType (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveType(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Policy.Evidence.RemoveType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveType (t As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveType(Type ^ t);" />
      <MemberSignature Language="F#" Value="member this.RemoveType : Type -&gt; unit" Usage="evidence.RemoveType t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">The type of the evidence to be removed.</param>
        <summary>Removes the evidence for a given type from the host and assembly enumerations.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="t" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Security.Policy.Evidence.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Security.Policy.Evidence.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the synchronization root.</summary>
        <value>Always <see langword="this" /> (<see langword="Me" /> in Visual Basic), because synchronization of evidence sets is not supported.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
