<Type Name="FileIOPermissionAccess" FullName="System.Security.Permissions.FileIOPermissionAccess">
  <TypeSignature Language="C#" Value="public enum FileIOPermissionAccess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FileIOPermissionAccess extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.FileIOPermissionAccess" />
  <TypeSignature Language="VB.NET" Value="Public Enum FileIOPermissionAccess" />
  <TypeSignature Language="C++ CLI" Value="public enum class FileIOPermissionAccess" />
  <TypeSignature Language="F#" Value="type FileIOPermissionAccess = " />
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Flags]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Flags&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Obsolete("Code Access Security is not supported or honored by the runtime.", DiagnosticId="SYSLIB0003", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Code Access Security is not supported or honored by the runtime.", DiagnosticId="SYSLIB0003", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the type of file access requested.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllAccess">
      <MemberSignature Language="C#" Value="AllAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess AllAccess = int32(15)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />
      <MemberSignature Language="VB.NET" Value="AllAccess" />
      <MemberSignature Language="C++ CLI" Value="AllAccess" />
      <MemberSignature Language="F#" Value="AllAccess = 15" Usage="System.Security.Permissions.FileIOPermissionAccess.AllAccess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>15</MemberValue>
      <Docs>
        <summary>
          <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> access to a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> represents multiple <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values and causes an <see cref="T:System.ArgumentException" /> when used as the <paramref name="access" /> parameter for the <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)" /> method, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="Append" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Append = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.Append" />
      <MemberSignature Language="VB.NET" Value="Append" />
      <MemberSignature Language="C++ CLI" Value="Append" />
      <MemberSignature Language="F#" Value="Append = 4" Usage="System.Security.Permissions.FileIOPermissionAccess.Append" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Access to append material to a file or directory. <see langword="FileIOPermissionAccess.Append" /> access includes the ability to create a new file or directory. To create files, code must also be granted both<see langword="Append" /> and either <see langword="Write" /> or <see langword="Read" /> access.</summary>
      </Docs>
    </Member>
    <Member MemberName="NoAccess">
      <MemberSignature Language="C#" Value="NoAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess NoAccess = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />
      <MemberSignature Language="VB.NET" Value="NoAccess" />
      <MemberSignature Language="C++ CLI" Value="NoAccess" />
      <MemberSignature Language="F#" Value="NoAccess = 0" Usage="System.Security.Permissions.FileIOPermissionAccess.NoAccess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>No access to a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> represents no valid <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values and causes an <see cref="T:System.ArgumentException" /> when used as the parameter for <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)" />, which expects a single value.</summary>
      </Docs>
    </Member>
    <Member MemberName="PathDiscovery">
      <MemberSignature Language="C#" Value="PathDiscovery" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess PathDiscovery = int32(8)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />
      <MemberSignature Language="VB.NET" Value="PathDiscovery" />
      <MemberSignature Language="C++ CLI" Value="PathDiscovery" />
      <MemberSignature Language="F#" Value="PathDiscovery = 8" Usage="System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
          <para>Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.</para>
          <para>For performance reasons, <see langword="PathDiscovery" /> should only be granted to directories, not to files. For example, <see langword="PathDiscovery" /> permission should be granted to paths such as C:\test and C:\test\, not C:\test\example.txt.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="Read" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Read = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
      <MemberSignature Language="VB.NET" Value="Read" />
      <MemberSignature Language="C++ CLI" Value="Read" />
      <MemberSignature Language="F#" Value="Read = 1" Usage="System.Security.Permissions.FileIOPermissionAccess.Read" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Access to read from a file or directory.</summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="Write" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Permissions.FileIOPermissionAccess Write = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
      <MemberSignature Language="VB.NET" Value="Write" />
      <MemberSignature Language="C++ CLI" Value="Write" />
      <MemberSignature Language="F#" Value="Write = 2" Usage="System.Security.Permissions.FileIOPermissionAccess.Write" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Access to write to or delete a file or directory. <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> access includes deleting and overwriting files or directories.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
