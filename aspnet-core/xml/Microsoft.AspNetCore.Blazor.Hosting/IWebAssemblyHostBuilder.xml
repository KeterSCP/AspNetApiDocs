<Type Name="IWebAssemblyHostBuilder" FullName="Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder">
  <TypeSignature Language="C#" Value="public interface IWebAssemblyHostBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebAssemblyHostBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebAssemblyHostBuilder" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebAssemblyHostBuilder" />
  <TypeSignature Language="F#" Value="type IWebAssemblyHostBuilder = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost Build ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost Build() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.Build" />
      <MemberSignature Language="VB.NET" Value="Public Function Build () As IWebAssemblyHost" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::AspNetCore::Blazor::Hosting::IWebAssemblyHost ^ Build();" />
      <MemberSignature Language="F#" Value="abstract member Build : unit -&gt; Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost" Usage="iWebAssemblyHostBuilder.Build " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureServices">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder ConfigureServices (Action&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder ConfigureServices(class System.Action`2&lt;class Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext, class Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.ConfigureServices(System.Action{Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureServices (configureDelegate As Action(Of WebAssemblyHostBuilderContext, IServiceCollection)) As IWebAssemblyHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::AspNetCore::Blazor::Hosting::IWebAssemblyHostBuilder ^ ConfigureServices(Action&lt;Microsoft::AspNetCore::Blazor::Hosting::WebAssemblyHostBuilderContext ^, Microsoft::Extensions::DependencyInjection::IServiceCollection ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="abstract member ConfigureServices : Action&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder" Usage="iWebAssemblyHostBuilder.ConfigureServices configureDelegate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="configureDelegate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,object&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, object&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary(Of Object, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ Properties { System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.IDictionary&lt;obj, obj&gt;" Usage="Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseServiceProviderFactory&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt; (Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt;(class Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1&lt;!!TContainerBuilder&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UseServiceProviderFactory(Of TContainerBuilder) (factory As IServiceProviderFactory(Of TContainerBuilder)) As IWebAssemblyHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA; Microsoft::AspNetCore::Blazor::Hosting::IWebAssemblyHostBuilder ^ UseServiceProviderFactory(Microsoft::Extensions::DependencyInjection::IServiceProviderFactory&lt;TContainerBuilder&gt; ^ factory);" />
      <MemberSignature Language="F#" Value="abstract member UseServiceProviderFactory : Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt; -&gt; Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder" Usage="iWebAssemblyHostBuilder.UseServiceProviderFactory factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseServiceProviderFactory&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt; (Func&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt;(class System.Func`2&lt;class Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext, class Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1&lt;!!TContainerBuilder&gt;&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function UseServiceProviderFactory(Of TContainerBuilder) (factory As Func(Of WebAssemblyHostBuilderContext, IServiceProviderFactory(Of TContainerBuilder))) As IWebAssemblyHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA; Microsoft::AspNetCore::Blazor::Hosting::IWebAssemblyHostBuilder ^ UseServiceProviderFactory(Func&lt;Microsoft::AspNetCore::Blazor::Hosting::WebAssemblyHostBuilderContext ^, Microsoft::Extensions::DependencyInjection::IServiceProviderFactory&lt;TContainerBuilder&gt; ^&gt; ^ factory);" />
      <MemberSignature Language="F#" Value="abstract member UseServiceProviderFactory : Func&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt;&gt; -&gt; Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder" Usage="iWebAssemblyHostBuilder.UseServiceProviderFactory factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Blazor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">To be added.</typeparam>
        <param name="factory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
